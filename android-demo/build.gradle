
buildscript {
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
    }
}

apply plugin: 'com.android.application'

configurations { natives }

dependencies {
    implementation project(':core-demo')
    implementation project(':android')
    implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    implementation 'games.spooky.gdx:gdx-nativefilechooser-android:2.0.0'
}

android {
    namespace "games.spooky.gdx.sfx.demo"
    compileSdk 34

    defaultConfig {
        applicationId "games.spooky.gdx.sfx"
        minSdkVersion 14
        targetSdkVersion 34
    }
    
    compileOptions {
        sourceCompatibility = 7
        targetCompatibility = 7
    }
    
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
    }
}

sourceCompatibility = 7
targetCompatibility = 7

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() { 
    file("libs/armeabi/").mkdirs()
    file("libs/armeabi-v7a/").mkdirs()
    file("libs/x86/").mkdirs()

    configurations.natives.files.each { jar ->
        def outputDir = null
        if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")        
        if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if(outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}

def adb

task defineAdbPath {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr -> properties.load(instr) }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }
    adb = path + "/platform-tools/adb"
}

task run(type: Exec, dependsOn: defineAdbPath) {
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'games.spooky.gdx.sfx.demo/games.spooky.gdx.sfx.demo.GdxSfxDemoAndroid'
    
    doLast{
        if (executionResult.exitValue != 0) {
            logger.error("It probably failed!")
        }
    }
}

license.excludes(["**/*.xml", "**/BuildConfig.java"])
